"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/chat/page",{

/***/ "(app-pages-browser)/./src/services/chatRealTime.ts":
/*!**************************************!*\
  !*** ./src/services/chatRealTime.ts ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   chatService: function() { return /* binding */ chatService; }\n/* harmony export */ });\n/* harmony import */ var socket_io_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! socket.io-client */ \"(app-pages-browser)/./node_modules/socket.io-client/build/esm/index.js\");\n/* harmony import */ var _lib_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/api */ \"(app-pages-browser)/./src/lib/api.ts\");\n\n\nclass ChatService {\n    connect() {\n        // Si ya tenemos una promesa de conexión en curso, la retornamos\n        if (this.connectPromise) {\n            return this.connectPromise;\n        }\n        this.connectPromise = new Promise((resolve)=>{\n            var _this_socket;\n            if ((_this_socket = this.socket) === null || _this_socket === void 0 ? void 0 : _this_socket.connected) {\n                console.log(\"Socket already connected\");\n                resolve();\n                return;\n            }\n            if (this.isConnecting) {\n                console.log(\"Already connecting...\");\n                resolve();\n                return;\n            }\n            this.isConnecting = true;\n            console.log(\"Attempting to connect to Socket.IO server...\");\n            this.socket = (0,socket_io_client__WEBPACK_IMPORTED_MODULE_0__.io)(this.baseUrl, {\n                withCredentials: true,\n                transports: [\n                    \"polling\",\n                    \"websocket\"\n                ],\n                timeout: 20000,\n                reconnection: true,\n                reconnectionAttempts: 3,\n                reconnectionDelay: 2000,\n                reconnectionDelayMax: 10000,\n                forceNew: false,\n                autoConnect: true,\n                upgrade: true,\n                rememberUpgrade: false\n            });\n            this.socket.on(\"connect\", ()=>{\n                console.log(\"✅ Socket.IO connected successfully\");\n                this.isConnecting = false;\n                this.reconnectAttempts = 0;\n                this.connectionStatusCallbacks.forEach((callback)=>callback(true));\n                resolve();\n            });\n            this.socket.on(\"connect_error\", (error)=>{\n                console.error(\"❌ Socket.IO connection error:\", error);\n                this.isConnecting = false;\n                this.connectionStatusCallbacks.forEach((callback)=>callback(false));\n                // Solo intentar reconectar automáticamente en errores de red\n                if (error.message && !error.message.includes(\"xhr poll error\")) {\n                    setTimeout(()=>{\n                        var _this_socket;\n                        if (!((_this_socket = this.socket) === null || _this_socket === void 0 ? void 0 : _this_socket.connected) && !this.isConnecting) {\n                            this.attemptReconnect();\n                        }\n                    }, 2000);\n                }\n            });\n            this.socket.on(\"disconnect\", (reason)=>{\n                console.log(\"\\uD83D\\uDD0C Socket.IO disconnected:\", reason);\n                this.isConnecting = false;\n                this.connectionStatusCallbacks.forEach((callback)=>callback(false));\n                // Auto-reconectar solo si no fue una desconexión intencional\n                if (reason !== \"io client disconnect\" && reason !== \"io server disconnect\") {\n                    setTimeout(()=>{\n                        var _this_socket;\n                        if (!((_this_socket = this.socket) === null || _this_socket === void 0 ? void 0 : _this_socket.connected) && !this.isConnecting) {\n                            this.attemptReconnect();\n                        }\n                    }, 2000);\n                }\n            });\n            // Timeout más generoso para permitir la conexión\n            setTimeout(()=>{\n                var _this_socket;\n                this.isConnecting = false;\n                if (!((_this_socket = this.socket) === null || _this_socket === void 0 ? void 0 : _this_socket.connected)) {\n                    console.log(\"⚠️ Socket.IO connection timeout, falling back to HTTP\");\n                    this.connectionStatusCallbacks.forEach((callback)=>callback(false));\n                }\n                resolve();\n            }, 15000);\n            this.socket.on(\"new_message\", (message)=>{\n                console.log(\"\\uD83D\\uDCE8 New message received:\", message);\n                // Mostrar notificación de nuevo mensaje\n                this.showNotification(message);\n                this.messageCallbacks.forEach((callback)=>callback(message));\n            });\n            this.socket.on(\"message_sent\", (message)=>{\n                console.log(\"✅ Message sent confirmation:\", message);\n            });\n            this.socket.on(\"user_status\", (data)=>{\n                console.log(\"\\uD83D\\uDC64 User status change:\", data);\n                this.userStatusCallbacks.forEach((callback)=>callback(data.user_id, data.status));\n            });\n            this.socket.on(\"user_typing\", (data)=>{\n                console.log(\"⌨️ User typing:\", data);\n                this.typingCallbacks.forEach((callback)=>callback(data.user_id, data.is_typing));\n            });\n            this.socket.on(\"unread_message\", (data)=>{\n                console.log(\"\\uD83D\\uDD14 Unread message notification:\", data);\n                this.unreadMessageCallbacks.forEach((callback)=>callback(data));\n            });\n            this.socket.on(\"message_error\", (error)=>{\n                console.error(\"❌ Message error:\", error.error);\n            });\n        });\n        return this.connectPromise;\n    }\n    attemptReconnect() {\n        if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n            return;\n        }\n        this.reconnectAttempts++;\n        const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 30000);\n        setTimeout(()=>{\n            var _this_socket;\n            if (!((_this_socket = this.socket) === null || _this_socket === void 0 ? void 0 : _this_socket.connected) && !this.isConnecting) {\n                this.connectPromise = null; // Reset promise\n                this.connect();\n            }\n        }, delay);\n    }\n    showNotification(message) {\n        // Solo mostrar notificación si el usuario no está en la página del chat\n        if (\"Notification\" in window && Notification.permission === \"granted\") {\n            if (document.hidden) {\n                new Notification(\"Nuevo mensaje de \".concat(message.sender_name), {\n                    body: message.message,\n                    icon: \"/favicon.ico\",\n                    tag: \"chat-message\"\n                });\n            }\n        }\n    }\n    disconnect() {\n        if (this.socket) {\n            this.socket.disconnect();\n            this.socket = null;\n        }\n        this.reconnectAttempts = 0;\n        this.isConnecting = false;\n        this.connectPromise = null; // Reset promise\n        this.connectionStatusCallbacks.forEach((callback)=>callback(false));\n    }\n    isSocketConnected() {\n        var _this_socket;\n        return ((_this_socket = this.socket) === null || _this_socket === void 0 ? void 0 : _this_socket.connected) || false;\n    }\n    sendMessage(receiverId, message) {\n        var _this_socket;\n        if (!((_this_socket = this.socket) === null || _this_socket === void 0 ? void 0 : _this_socket.connected)) {\n            this.sendMessageHttp(receiverId, message).catch((error)=>{\n                console.error(\"Error enviando mensaje por HTTP:\", error);\n            });\n            return;\n        }\n        this.socket.emit(\"send_message\", {\n            receiver_id: receiverId,\n            message: message\n        });\n    }\n    sendTypingIndicator(receiverId, isTyping) {\n        var _this_socket;\n        if ((_this_socket = this.socket) === null || _this_socket === void 0 ? void 0 : _this_socket.connected) {\n            this.socket.emit(\"typing\", {\n                receiver_id: receiverId,\n                is_typing: isTyping\n            });\n        }\n    }\n    startTyping(receiverId) {\n        this.sendTypingIndicator(receiverId, true);\n        // Limpiar timer anterior si existe\n        if (this.typingTimer) {\n            clearTimeout(this.typingTimer);\n        }\n        // Enviar \"stop typing\" después de 3 segundos\n        this.typingTimer = setTimeout(()=>{\n            this.sendTypingIndicator(receiverId, false);\n        }, 3000);\n    }\n    stopTyping(receiverId) {\n        if (this.typingTimer) {\n            clearTimeout(this.typingTimer);\n            this.typingTimer = null;\n        }\n        this.sendTypingIndicator(receiverId, false);\n    }\n    async sendMessageHttp(receiverId, message) {\n        try {\n            const response = await _lib_api__WEBPACK_IMPORTED_MODULE_1__[\"default\"].post(\"/send-message\", {\n                receiver_id: receiverId,\n                message: message\n            });\n            const messageData = {\n                id: response.data.id.toString(),\n                sender_id: response.data.sender_id.toString(),\n                receiver_id: response.data.receiver_id.toString(),\n                sender_name: \"T\\xfa\",\n                message: response.data.message,\n                timestamp: response.data.timestamp,\n                is_mine: true\n            };\n            // Notificar a los callbacks\n            this.messageCallbacks.forEach((callback)=>callback(messageData));\n            return messageData;\n        } catch (error) {\n            throw error;\n        }\n    }\n    onMessage(callback) {\n        this.messageCallbacks.push(callback);\n        return ()=>{\n            const index = this.messageCallbacks.indexOf(callback);\n            if (index > -1) {\n                this.messageCallbacks.splice(index, 1);\n            }\n        };\n    }\n    onUserStatusChange(callback) {\n        this.userStatusCallbacks.push(callback);\n        return ()=>{\n            const index = this.userStatusCallbacks.indexOf(callback);\n            if (index > -1) {\n                this.userStatusCallbacks.splice(index, 1);\n            }\n        };\n    }\n    onConnectionStatus(callback) {\n        this.connectionStatusCallbacks.push(callback);\n        return ()=>{\n            const index = this.connectionStatusCallbacks.indexOf(callback);\n            if (index > -1) {\n                this.connectionStatusCallbacks.splice(index, 1);\n            }\n        };\n    }\n    onTyping(callback) {\n        this.typingCallbacks.push(callback);\n        return ()=>{\n            const index = this.typingCallbacks.indexOf(callback);\n            if (index > -1) {\n                this.typingCallbacks.splice(index, 1);\n            }\n        };\n    }\n    onUnreadMessage(callback) {\n        this.unreadMessageCallbacks.push(callback);\n        return ()=>{\n            const index = this.unreadMessageCallbacks.indexOf(callback);\n            if (index > -1) {\n                this.unreadMessageCallbacks.splice(index, 1);\n            }\n        };\n    }\n    requestNotificationPermission() {\n        if (\"Notification\" in window && Notification.permission === \"default\") {\n            Notification.requestPermission();\n        }\n    }\n    async getMessages(receiverId) {\n        try {\n            // Usar la nueva ruta que maneja UUIDs\n            const response = await _lib_api__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(\"/get-messages-uuid/\".concat(receiverId));\n            return response.data.messages || [];\n        } catch (error) {\n            throw error;\n        }\n    }\n    async getUsers() {\n        try {\n            var _data_doctors;\n            const response = await _lib_api__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(\"/get-chat-doctors\");\n            const data = response.data;\n            return ((_data_doctors = data.doctors) === null || _data_doctors === void 0 ? void 0 : _data_doctors.map((doctor)=>({\n                    id: doctor.id.toString(),\n                    supabase_id: doctor.supabase_id,\n                    name: \"\".concat(doctor.firstName, \" \").concat(doctor.lastName1),\n                    email: doctor.email,\n                    specialty: doctor.speciality,\n                    status: \"offline\"\n                }))) || [];\n        } catch (error) {\n            return [\n                {\n                    id: \"1\",\n                    supabase_id: crypto.randomUUID(),\n                    name: \"Dr. Juan P\\xe9rez\",\n                    email: \"juan.perez@hospital.com\",\n                    specialty: \"Cardiolog\\xeda\",\n                    status: \"online\"\n                },\n                {\n                    id: \"2\",\n                    supabase_id: crypto.randomUUID(),\n                    name: \"Dra. Mar\\xeda Gonz\\xe1lez\",\n                    email: \"maria.gonzalez@hospital.com\",\n                    specialty: \"Neurolog\\xeda\",\n                    status: \"offline\"\n                },\n                {\n                    id: \"3\",\n                    supabase_id: crypto.randomUUID(),\n                    name: \"Dr. Carlos L\\xf3pez\",\n                    email: \"carlos.lopez@hospital.com\",\n                    specialty: \"Pediatr\\xeda\",\n                    status: \"offline\"\n                }\n            ];\n        }\n    }\n    async getUnreadCounts() {\n        try {\n            const response = await _lib_api__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(\"/get-unread-counts\");\n            const data = response.data;\n            return data.unread_counts || {};\n        } catch (error) {\n            return {};\n        }\n    }\n    constructor(){\n        this.socket = null;\n        this.baseUrl = \"http://localhost:5000\" || 0;\n        this.messageCallbacks = [];\n        this.userStatusCallbacks = [];\n        this.connectionStatusCallbacks = [];\n        this.typingCallbacks = [];\n        this.unreadMessageCallbacks = [];\n        this.reconnectAttempts = 0;\n        this.maxReconnectAttempts = 3;\n        this.isConnecting = false;\n        this.typingTimer = null;\n        this.connectPromise = null;\n    }\n}\nconst chatService = new ChatService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/chatRealTime.ts\n"));

/***/ })

});